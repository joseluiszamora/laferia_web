generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model Category {
  categoryId       Int        @id @default(autoincrement()) @map("category_id")
  name             String     @unique @db.VarChar(255)
  slug             String     @unique @db.VarChar(255)
  description      String?
  icon             String?    @db.VarChar(100)
  color            String?    @db.VarChar(7)
  imageUrl         String?    @map("image_url")
  isActive         Boolean    @default(true) @map("is_active")
  sortOrder        Int        @default(0) @map("sort_order")
  createdAt        DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  parentCategoryId Int?       @map("parent_category_id")
  parentCategory   Category?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [categoryId], onDelete: Cascade)
  subcategories    Category[] @relation("CategoryHierarchy")
  products         Product[]
  stores           Store[]

  @@index([name], map: "idx_category_name")
  @@index([parentCategoryId], map: "idx_category_parent_id")
  @@index([slug], map: "idx_category_slug")
  @@index([isActive], map: "idx_category_active")
  @@index([sortOrder], map: "idx_category_sort_order")
  @@map("Category")
}

model Store {
  storeId       Int         @id @default(autoincrement()) @map("store_id")
  name          String      @db.VarChar(255)
  slug          String      @unique @db.VarChar(255)
  ownerName     String      @map("owner_name") @db.VarChar(255)
  email         String?     @db.VarChar(255)
  phone         String?     @db.VarChar(50)
  whatsapp      String?     @db.VarChar(50)
  latitude      Float
  longitude     Float
  categoryId    Int         @map("category_id")
  contact       Json?
  address       String?
  daysAttention String[]    @default(["thursday", "sunday"]) @map("days_attention")
  openingHours  String?     @default("08:00 - 18:00") @map("opening_hours") @db.VarChar(50)
  averageRating Decimal?    @default(0.00) @map("average_rating") @db.Decimal(3, 2)
  totalComments Int         @default(0) @map("total_comments")
  status        StoreStatus @default(PENDING)
  logoUrl       String?     @map("logo_url")
  bannerUrl     String?     @map("banner_url")
  description   String?
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  comments      Comment[]
  products      Product[]
  category      Category    @relation(fields: [categoryId], references: [categoryId], onUpdate: NoAction)

  @@index([name], map: "idx_store_name")
  @@index([slug], map: "idx_store_slug")
  @@index([latitude, longitude], map: "idx_store_location")
  @@index([categoryId], map: "idx_store_category_id")
  @@index([status], map: "idx_store_status")
  @@map("Store")
}

model Product {
  productId        Int                 @id @default(autoincrement()) @map("product_id")
  name             String              @db.VarChar(255)
  slug             String              @unique @db.VarChar(255)
  description      String
  shortDescription String?             @map("short_description") @db.VarChar(500)
  sku              String?             @unique @db.VarChar(100)
  barcode          String?             @unique @db.VarChar(100)
  price            Decimal             @db.Decimal(10, 2)
  discountedPrice  Decimal?            @map("discounted_price") @db.Decimal(10, 2)
  costPrice        Decimal?            @map("cost_price") @db.Decimal(10, 2)
  acceptOffers     Boolean             @default(false) @map("accept_offers")
  stock            Int                 @default(0)
  lowStockAlert    Int                 @default(5) @map("low_stock_alert")
  weight           Decimal?            @db.Decimal(8, 2)
  dimensions       Json?
  categoryId       Int                 @map("category_id")
  brandId          Int?                @map("brand_id")
  storeId          Int                 @map("store_id")
  status           ProductStatus       @default(DRAFT)
  isAvailable      Boolean             @default(true) @map("is_available")
  isFeatured       Boolean             @default(false) @map("is_featured")
  metaTitle        String?             @map("meta_title") @db.VarChar(255)
  metaDescription  String?             @map("meta_description") @db.VarChar(500)
  tags             String[]            @default([])
  viewCount        Int                 @default(0) @map("view_count")
  saleCount        Int                 @default(0) @map("sale_count")
  createdAt        DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  brand            Brand?              @relation(fields: [brandId], references: [brandId], onUpdate: NoAction)
  category         Category            @relation(fields: [categoryId], references: [categoryId], onUpdate: NoAction)
  store            Store               @relation(fields: [storeId], references: [storeId], onUpdate: NoAction)
  attributes       ProductAttributes[]
  medias           ProductMedias[]

  @@index([name], map: "idx_product_name")
  @@index([slug], map: "idx_product_slug")
  @@index([categoryId], map: "idx_product_category_id")
  @@index([brandId], map: "idx_product_brand_id")
  @@index([storeId], map: "idx_product_store_id")
  @@index([status], map: "idx_product_status")
  @@index([isAvailable], map: "idx_product_available")
  @@index([isFeatured], map: "idx_product_featured")
  @@index([sku], map: "idx_product_sku")
  @@index([barcode], map: "idx_product_barcode")
  @@map("Product")
}

model Brand {
  brandId     Int       @id @default(autoincrement()) @map("brand_id")
  name        String    @unique @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  description String?
  logoUrl     String?   @map("logo_url")
  websiteUrl  String?   @map("website_url")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  products    Product[]

  @@index([name], map: "idx_brand_name")
  @@index([slug], map: "idx_brand_slug")
  @@index([isActive], map: "idx_brand_active")
  @@map("Brand")
}

model ProductAttributes {
  productAttributesId Int      @id @default(autoincrement()) @map("product_attributes_id")
  productId           Int      @map("product_id")
  name                String   @db.VarChar(100)
  value               String   @db.VarChar(255)
  type                String?  @default("text") @db.VarChar(50)
  unity               String?  @db.VarChar(20)
  order               Int      @default(0)
  isVisible           Boolean  @default(true) @map("is_visible")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  product             Product  @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: NoAction)

  @@map("ProductAttributes")
}

model ProductMedias {
  productMediasId Int       @id @default(autoincrement()) @map("product_medias_id")
  productId       Int       @map("product_id")
  type            MediaType @default(IMAGE)
  url             String
  thumbnailUrl    String?   @map("thumbnail_url")
  width           Int?
  height          Int?
  fileSize        BigInt?   @map("file_size")
  duration        Int?
  order           Int       @default(0)
  isMain          Boolean   @default(false) @map("is_main")
  isActive        Boolean   @default(true) @map("is_active")
  description     String?
  altText         String?   @map("alt_text") @db.VarChar(255)
  metadata        Json?
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  product         Product   @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: NoAction)

  @@map("ProductMedias")
}

model Comment {
  commentId Int       @id @default(autoincrement()) @map("comment_id")
  storeId   Int       @map("store_id")
  userName  String    @map("user_name") @db.VarChar(255)
  userEmail String?   @map("user_email") @db.VarChar(255)
  avatarUrl String?   @map("avatar_url")
  comment   String
  rating    Decimal   @db.Decimal(2, 1)
  approved  Boolean   @default(false)
  images    String[]  @default([])
  answer    String?
  answerAt  DateTime? @map("answer_at") @db.Timestamptz(6)
  isActive  Boolean   @default(true) @map("is_active")
  ipAddress String?   @map("ip_address") @db.VarChar(45)
  userAgent String?   @map("user_agent")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  store     Store     @relation(fields: [storeId], references: [storeId], onDelete: Cascade, onUpdate: NoAction)

  @@map("Comment")
}

enum StoreStatus {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
  PENDING  @map("pending")
  SUSPEND  @map("suspend")

  @@map("store_status")
}

enum ProductStatus {
  DRAFT     @map("draft")
  PUBLISHED @map("published")
  ARCHIVED  @map("archived")
  EXHAUSTED @map("exhausted")

  @@map("product_status")
}

enum MediaType {
  IMAGE @map("image")
  VIDEO @map("video")
  PDF   @map("pdf")

  @@map("media_type")
}
